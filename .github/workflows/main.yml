name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  # schedule:
  #   - cron: '0 * * * *'  # This runs the workflow every hour
  #   - cron: '0 10 * * *'  # This runs the workflow every day at 10 AM
  workflow_dispatch:

env:
  DBT_PROFILES_DIR: /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/.github
  PROFILES_YML_SNOWFLAKE_ACCOUNT: ${{ secrets.PROFILES_YML_SNOWFLAKE_ACCOUNT }}
  PROFILES_YML_SNOWFLAKE_USER: ${{ secrets.PROFILES_YML_SNOWFLAKE_USER }}
  PROFILES_YML_SNOWFLAKE_PASSWORD: ${{ secrets.PROFILES_YML_SNOWFLAKE_PASSWORD }}
  PROFILES_YML_SNOWFLAKE_ROLE: ${{ secrets.PROFILES_YML_SNOWFLAKE_ROLE }}
  PROFILES_YML_SNOWFLAKE_DATABASE: ${{ secrets.PROFILES_YML_SNOWFLAKE_DATABASE }}
  PROFILES_YML_SNOWFLAKE_SCHEMA: "CI_GHA"
  PROFILES_YML_SNOWFLAKE_WAREHOUSE: ${{ secrets.PROFILES_YML_SNOWFLAKE_WAREHOUSE }}

jobs:

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Clone Repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install python dependencies
        run: pip install --no-dependencies -r requirements.txt

      - name: Install dbt dependencies
        run: dbt deps

      - name: Test data source freshness
        run: make check-src-freshness

      - name: Build and test changed models
        run: |
          if [ -f .state/manifest.json ]; then
            echo "Running dbt build for modified models and downstream models";
            dbt build --fail-fast --models state:modified+ --state .state;
          else
            echo "Running dbt build for all models";
            dbt build --fail-fast;
          fi

      - name: Evaluate dbt Labs' best practices
        run: make check

      - name: Test coverage
        run: make test-coverage

      - name: Upload compiled SQL files as artifact
        uses: actions/upload-artifact@v3
        with:
          name: target
          path: target

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Clone Repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install python dependencies
        run: pip install --no-dependencies -r requirements.txt

      - name: Install dbt dependencies
        run: dbt deps

      - name: Check code is linted
        run: make lint


  commit-current-state:
    if: github.ref == 'refs/heads/main'
    name: commit dbt state
    needs: [test, lint]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
      GIT_AUTHOR_NAME: "gb-autobot"
      GIT_AUTHOR_EMAIL: "autobot@gb.com"
      GIT_COMMITTER_NAME: "gb-autobot"
      GIT_COMMITTER_EMAIL: "autobot@gb.com"
    steps:
      - name: Clone Repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install python dependencies
        run: pip install --no-dependencies -r requirements.txt

      - name: Install dbt dependencies
        run: dbt deps

      - name: Generate current state
        run: |
          dbt compile
          rm -rf .state
          mkdir .state
          mv target/manifest.json .state/manifest.json
          echo "STATE_CHANGED=$(git status --porcelain .state/manifest.json)" >> $GITHUB_ENV

      - name: Commit and push .state/manifest.json if changed
        if: env.STATE_CHANGED != ''
        run: |
          git pull origin HEAD:main
          git add .state/manifest.json
          git commit -m "ðŸ¤– Update .state/manifest.json via GitHub Actions [skip ci]"
          git push origin HEAD:main
