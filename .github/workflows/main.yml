name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  # schedule:
  #   - cron: '0 * * * *'  # This runs the workflow every hour
  #   - cron: '0 10 * * *'  # This runs the workflow every day at 10 AM
  workflow_dispatch:

env:
  DBT_PROFILES_DIR: /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/.github
  PROFILES_YML_SNOWFLAKE_ACCOUNT: ${{ secrets.PROFILES_YML_SNOWFLAKE_ACCOUNT }}
  PROFILES_YML_SNOWFLAKE_USER: ${{ secrets.PROFILES_YML_SNOWFLAKE_USER }}
  PROFILES_YML_SNOWFLAKE_PASSWORD: ${{ secrets.PROFILES_YML_SNOWFLAKE_PASSWORD }}
  PROFILES_YML_SNOWFLAKE_ROLE: ${{ secrets.PROFILES_YML_SNOWFLAKE_ROLE }}
  PROFILES_YML_SNOWFLAKE_DATABASE: ${{ secrets.PROFILES_YML_SNOWFLAKE_DATABASE }}
  PROFILES_YML_SNOWFLAKE_SCHEMA: "CI_GHA"
  PROFILES_YML_SNOWFLAKE_WAREHOUSE: ${{ secrets.PROFILES_YML_SNOWFLAKE_WAREHOUSE }}

jobs:

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Clone Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Check commit messages match angular style"
        run: |
          git fetch origin main
          git merge --no-ff origin/main
          ! git log origin/main..HEAD  --pretty=format:%s | \
            grep -v -E '^(build|chore|ci|docs|feat|fix|perf|style|refactor|test):'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install python dependencies
        run: pip install --no-dependencies -r requirements.txt

      - name: Set cache for dbt packages
        id: dbt_packages_cache
        uses: actions/cache@v3
        with:
          path: dbt_packages/
          key: ${{ runner.os }}-dbt-packages-${{ hashFiles('packages.yml') }}
          restore-keys: ${{ runner.os }}-dbt-packages-

      - name: Install dbt packages
        if: steps.dbt_packages_cache.outputs.cache-hit != 'true'
        run: dbt deps

      - name: Compile dbt state
        run: dbt compile

      - name: Upload dbt target
        uses: actions/upload-artifact@v3
        with:
          name: target
          path: |
            target

  test:
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 10
    steps:
      - name: Clone Repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install python dependencies
        run: pip install --no-dependencies -r requirements.txt

      - name: Restore dbt packages from cache
        uses: actions/cache@v3
        with:
          path: dbt_packages/
          key: ${{ runner.os }}-dbt-packages-${{ hashFiles('packages.yml') }}
          restore-keys: ${{ runner.os }}-dbt-packages-

      - name: Download dbt target
        uses: actions/download-artifact@v3
        with:
          name: target
          path: target/

      - name: Test data source freshness
        run: make check-src-freshness

      - name: Build and test models
        run: |
          if [[ "${{ github.event_name }}" != "schedule" && -f .state/manifest.json ]]; then
            make test
          else
            make test-all
          fi

      - name: Evaluate dbt Labs' best practices
        run: make check

      - name: Test coverage
        run: make test-coverage

  lint:
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 5
    steps:
      - name: Clone Repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install python dependencies
        run: pip install --no-dependencies -r requirements.txt

      - name: Restore dbt packages from cache
        uses: actions/cache@v3
        with:
          path: dbt_packages/
          key: ${{ runner.os }}-dbt-packages-${{ hashFiles('packages.yml') }}
          restore-keys: ${{ runner.os }}-dbt-packages-

      - name: Download dbt target
        uses: actions/download-artifact@v3
        with:
          name: target
          path: target/

      - name: Check code is linted
        run: make lint

  commit-updated-state:
    if: github.ref == 'refs/heads/main'
    name: update dbt state and docs
    needs: [test, lint]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
      GIT_AUTHOR_NAME: "gb-autobot"
      GIT_AUTHOR_EMAIL: "autobot@gb.com"
      GIT_COMMITTER_NAME: "gb-autobot"
      GIT_COMMITTER_EMAIL: "autobot@gb.com"
    steps:
      - name: Clone Repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install python dependencies
        run: pip install --no-dependencies -r requirements.txt

      - name: Restore dbt packages from cache
        uses: actions/cache@v3
        with:
          path: dbt_packages/
          key: ${{ runner.os }}-dbt-packages-${{ hashFiles('packages.yml') }}
          restore-keys: ${{ runner.os }}-dbt-packages-

      - name: Download dbt target
        uses: actions/download-artifact@v3
        with:
          name: target
          path: target/

      - name: Update column-level statistics docs for models
        run: make dbt-profiler

      - name: Commit and push dbt models state
        run: |
          git pull origin HEAD:main

          # update .state/manifest.json
          rm .state/manifest.json || true
          cp target/manifest.json .state/manifest.json

          # commit updated files
          git add models/**/*.md
          git add .state/manifest.json
          git commit -m "ðŸ¤– Update db state and docs via GitHub Actions [skip ci]"
          git push origin HEAD:main
