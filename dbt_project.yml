# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'jaffle_shop'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'personal_profile'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

on-run-end:
  - "{% if target.name == 'prod' %}{{ dbt_artifacts.upload_results(results) }}{% endif %}"
  - "{{ dbt_project_evaluator.print_dbt_project_evaluator_issues() }}"

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro. e.g. `{{ config(materialized='view') }}`
# everything in it will be materialized as a table; and everything in example
# will be materialized as a view.
models:
  dbt_artifacts:
    schema: monitoring
  jaffle_shop:
    # all models should have docs, and unique/not_null tests
    +required_tests: {"unique.*|not_null": 1}
    +required_docs: true
    marts:
      # marts models should have unique/not_null, and relationships tests
      +required_tests: {"relationship.*": 1}
      core:
        +materialized: table
    staging:
      +materialized: view

vars:
  "dbt_date:time_zone": "America/Los_Angeles"
  exclude_packages: ["dbt_artifacts"]
  exclude_paths_from_project: [
    "models/.*fct_.*"  # no PK in fact tables
  ]

# can be overridden as {{ config(...) }} in the generic tests, or in the models (yaml)
tests:
  dbt_project_evaluator:
    +enabled: false # must be run explicitely with dbt build --select package:dbt_project_evaluator
    +severity: "{{ env_var('DBT_PROJECT_EVALUATOR_SEVERITY', 'error') }}"
    +warn_if: ">5"
    +error_if: ">10"
    +limit: 100
  jaffle_shop:
    +severity: "{{ env_var('DBT_PROJECT_EVALUATOR_SEVERITY', 'error') }}"
    +store_failures: true
    +schema: test_failures
    +where_date: "order_date > '2015-01-01" # ignore records before that date
